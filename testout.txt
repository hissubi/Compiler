lexical success
15
1 line size: 4
myprogram ( ) { 
2 line size: 3
int a ; 
3 line size: 4
a = 1 ; 
4 line size: 6
IF a < 3 THEN { 
5 line size: 3
int b ; 
6 line size: 4
b = 4 ; 
7 line size: 0

8 line size: 6
IF b < 4 THEN { 
9 line size: 3
} ELSE { 
10 line size: 4
a = 5 ; 
11 line size: 1
} 
12 line size: 3
} ELSE { 
13 line size: 4
a = 10 ; 
14 line size: 1
} 
15 line size: 1
} 
parser start
Syntax Error: no appropriate rule: line9


data: prog0  child num: 4
0 0 0
	 child: word ( ) block0 
data: word  child num: 1
0 0 0
	 child: myprogram 
data: myprogram  child num: 0
0 0 0
	 child: 
data: (  child num: 0
0 0 0
	 child: 
data: )  child num: 0
0 0 0
	 child: 
data: block0  child num: 4
0 0 1
	 child: { decls0 slist0 } 
data: {  child num: 0
0 0 1
	 child: 
data: decls0  child num: 1
0 0 1
	 child: decls_0 
data: decls_0  child num: 2
0 0 1
	 child: decl0 decls_0 
data: decl0  child num: 3
0 0 1
	 child: vtype0 word ; 
data: vtype0  child num: 1
0 0 1
	 child: int 
data: int  child num: 0
0 0 1
	 child: 
data: word  child num: 1
0 0 1
	 child: a 
data: a  child num: 0
0 0 1
	 child: 
data: ;  child num: 0
0 0 1
	 child: 
data: decls_0  child num: 0
0 0 1
	 child: 
data: slist0  child num: 1
0 0 1
	 child: slist_0 
data: slist_0  child num: 2
0 0 1
	 child: stat0 slist_0 
data: stat0  child num: 4
0 0 1
	 child: word = expr0 ; 
data: word  child num: 1
0 0 1
	 child: a 
data: a  child num: 0
0 0 1
	 child: 
data: =  child num: 0
0 0 1
	 child: 
data: expr0  child num: 2
0 0 1
	 child: T0 E_0 
data: T0  child num: 2
0 0 1
	 child: F0 T_0 
data: F0  child num: 1
0 0 1
	 child: fact0 
data: fact0  child num: 1
0 0 1
	 child: num 
data: num  child num: 1
0 0 1
	 child: 1 
data: 1  child num: 0
0 0 1
	 child: 
data: T_0  child num: 0
0 0 1
	 child: 
data: E_0  child num: 0
1 0 1
	 child: 
data: ;  child num: 0
0 0 1
	 child: 
data: slist_0  child num: 2
0 0 1
	 child: stat0 slist_0 
data: stat0  child num: 6
0 0 1
	 child: IF cond0 THEN block0 ELSE block0 
data: IF  child num: 0
0 0 1
	 child: 
data: cond0  child num: 3
0 0 1
	 child: expr0 < expr0 
data: expr0  child num: 2
0 0 1
	 child: T0 E_0 
data: T0  child num: 2
0 0 1
	 child: F0 T_0 
data: F0  child num: 1
0 0 1
	 child: fact0 
data: fact0  child num: 1
0 0 1
	 child: word 
data: word  child num: 1
0 0 1
	 child: a 
data: a  child num: 0
0 0 1
	 child: 
data: T_0  child num: 0
0 0 1
	 child: 
data: E_0  child num: 0
1 0 1
	 child: 
data: <  child num: 0
0 0 1
	 child: 
data: expr0  child num: 2
1 0 1
	 child: T0 E_0 
data: T0  child num: 2
1 0 1
	 child: F0 T_0 
data: F0  child num: 1
1 0 1
	 child: fact0 
data: fact0  child num: 1
1 0 1
	 child: num 
data: num  child num: 1
1 0 1
	 child: 3 
data: 3  child num: 0
1 0 1
	 child: 
data: T_0  child num: 0
1 0 1
	 child: 
data: E_0  child num: 0
2 0 1
	 child: 
data: THEN  child num: 0
0 0 1
	 child: 
data: block0  child num: 4
0 1 2
	 child: { decls0 slist0 } 
data: {  child num: 0
0 1 2
	 child: 
data: decls0  child num: 1
0 1 2
	 child: decls_0 
data: decls_0  child num: 2
0 1 2
	 child: decl0 decls_0 
data: decl0  child num: 3
0 1 2
	 child: vtype0 word ; 
data: vtype0  child num: 1
0 1 2
	 child: int 
data: int  child num: 0
0 1 2
	 child: 
data: word  child num: 1
0 1 2
	 child: b 
data: b  child num: 0
0 1 2
	 child: 
data: ;  child num: 0
0 1 2
	 child: 
data: decls_0  child num: 0
0 1 2
	 child: 
data: slist0  child num: 1
0 1 2
	 child: slist_0 
data: slist_0  child num: 2
0 1 2
	 child: stat0 slist_0 
data: stat0  child num: 4
0 1 2
	 child: word = expr0 ; 
data: word  child num: 1
0 1 2
	 child: b 
data: b  child num: 0
0 1 2
	 child: 
data: =  child num: 0
0 1 2
	 child: 
data: expr0  child num: 2
0 1 2
	 child: T0 E_0 
data: T0  child num: 2
0 1 2
	 child: F0 T_0 
data: F0  child num: 1
0 1 2
	 child: fact0 
data: fact0  child num: 1
0 1 2
	 child: num 
data: num  child num: 1
0 1 2
	 child: 4 
data: 4  child num: 0
0 1 2
	 child: 
data: T_0  child num: 0
0 1 2
	 child: 
data: E_0  child num: 0
1 1 2
	 child: 
data: ;  child num: 0
0 1 2
	 child: 
data: slist_0  child num: 2
0 1 2
	 child: stat0 slist_0 
data: stat0  child num: 6
0 1 2
	 child: IF cond0 THEN block0 ELSE block0 
data: IF  child num: 0
0 1 2
	 child: 
data: cond0  child num: 3
0 1 2
	 child: expr0 < expr0 
data: expr0  child num: 2
0 1 2
	 child: T0 E_0 
data: T0  child num: 2
0 1 2
	 child: F0 T_0 
data: F0  child num: 1
0 1 2
	 child: fact0 
data: fact0  child num: 1
0 1 2
	 child: word 
data: word  child num: 1
0 1 2
	 child: b 
data: b  child num: 0
0 1 2
	 child: 
data: T_0  child num: 0
0 1 2
	 child: 
data: E_0  child num: 0
1 1 2
	 child: 
data: <  child num: 0
0 1 2
	 child: 
data: expr0  child num: 2
1 1 2
	 child: T0 E_0 
data: T0  child num: 2
1 1 2
	 child: F0 T_0 
data: F0  child num: 1
1 1 2
	 child: fact0 
data: fact0  child num: 1
1 1 2
	 child: num 
data: num  child num: 1
1 1 2
	 child: 4 
data: 4  child num: 0
1 1 2
	 child: 
data: T_0  child num: 0
1 1 2
	 child: 
data: E_0  child num: 0
2 1 2
	 child: 
data: THEN  child num: 0
0 2 2
	 child: 
data: block0  child num: 4
0 3 3
	 child: { decls0 slist0 } 
data: {  child num: 0
0 3 3
	 child: 
data: decls0  child num: 2
0 3 3
	 child: decl0 decls_0 
data: decl0  child num: 0
0 3 3
	 child: 
data: decls_0  child num: 0
0 3 3
	 child: 
data: slist0  child num: 0
0 3 3
	 child: 
data: }  child num: 0
0 3 3
	 child: 
data: ELSE  child num: 0
0 2 2
	 child: 
data: block0  child num: 0
0 3 4
	 child: 
data: slist_0  child num: 0
0 1 2
	 child: 
data: }  child num: 0
0 1 2
	 child: 
data: ELSE  child num: 0
0 0 1
	 child: 
data: block0  child num: 0
0 1 5
	 child: 
data: slist_0  child num: 0
0 0 1
	 child: 
data: }  child num: 0
0 0 1
	 child: 
